Additional Configuration
========================

To run an algorithm a problem configuration is needed.
Optionally, one can also configure a random seed.  To execute a quantum algorithms, it is
necessary to specify a quantum device that will generate, compile and execute the quantum
circuit.

Problem
-------
In QISKit ACQUA,
a *problem* specifies the type of experiment being run.  Configuring the problem is essential
because it determines which algorithms are suitable for the specific experiment.
QISKit ACQUA comes with a set of predefined problems.  This set is extensible: new problems can be added,
just like new algorithms can be plugged in to solve existing problems in a different way, or to solve
new problems.

Currently, a problem can be configured by assigning a ``string`` value to the ``problem`` parameter:

.. code:: python

    problem = "energy" | "excited_states" | "ising" | "dynamics" | "search" | "svm_classification"

While ``"energy"``, ``"excited_states"``, ``"ising"``, ``"dynamics"``, ``"search"``, and ``"svm_classification"`` are
currently the values accepted for ``problem``, new problems can be programmatially added via the
``algorithminput.py`` Application Programming Interface (API), and each quantum or classical `algorithm <./algorithms.html>`__
should programmatically list the problems it is suitable for in its JSON schema, embedded into
the class implementing the algorithm.

Random Seed
-----------

Aspects of the computation may include use of random numbers. For instance, 
`VQE <./algorithms.html#variational-quantum-eigensolver-vqe>`__
will often use a random initial
point if the variational form does not supply any preference based on the initial state and if the
user does not explicitly supply an initial point. 
In this casei, each run of VQE, for what would otherwise be a constant problem, can result in a different
result, causing non-determinism and the inability to replicate the same result across different runs with
the same configuration. Even though the final value might be numerically identical, the number of evaluations
that led to the computation of that value may differ across runs. To enable repeatable
experiments, with the exact same outcome, a *random seed* can be set so as the pseudo-random numbers will
be generated the same each time the experiment is run:

.. code:: python

    random_ssed : int

The default value for this parameter is ``None``.

Backend
-------
QISKit ACQUA allows for configuring the quantum device on which a quantum experiment willn be run.  This
configuration requires specifying 
the `QISKit <https://www.qiskit.org/>`__. quantum computational
backend to be used for computation:

.. code:: python

    backend : string

Any suitable quantum backend sumulator can be selected.  The underlying QISKit core used by QISKit ACQUA comes
with two predefined quantum device simulators: the *local statevector simulator* and
the *local QASM simulator*, corresponding to the following two
values for the ``backend`` parameter: ``"local_statevector_simulator"`` (which
is the default value for the ``backend`` parameter) and ``"local_qasm_simulator"``, respectively.
However, any suitable quantum backend can be selected. The ``QConfig.py`` file
needs to be setup for QISKit to access remote devices.
See `QISKit installation <https://qiskit.org/documentation/install.html#installation>`__ for information on how to
configure the ``QConfig.py``.  The QISKit ACQUA Graphical User Interface (GUI) offers a user friendly interface
to ``QConfig.py``, accessible through the **Preferences...*** menu item.

.. note::
QISKit ACQUA includes some `classical algorithms <./algorithms.html#classical-algorithms>`__
that can be selected to generate reference values
and compare and contrast results in quantum research experimentation. When a classical algorithm
is selected, then it is not necessary to configure a backend.  The QISKit ACQUA GUI will automatically
disable the backend configuration whenever a non-quantum algorithm is selected. 

Configuring the backend to use by a `quasntum algorithm <./algorithms.html#quantum-algorithms>`__ requires setting the following parameters too:

-  The number of repetitions of each circuit to be used for sampling:

   .. code:: python

        shots : int

   This parameter applies, in particular to the local QASM simulator and any real quantum device.  THe default
   value is ``1024``. 
   
-  A ``bool`` value indicating whether or not the circit should undergo optimization:

   .. code:: python
       
        skip_transpiler : bool

   The default value is ``False``.  If ``skip_transpiler`` is set to ``True``, tren
   QISKit will not perform circuit translation. If QISKit ACQUA has been configured
   to run an experiment with a quantum algorithm that uses only basis gates, then no translation of
   the circuit into basis gates is required.  Only in such cases it is safe to skip circuit translation.
   Skipping the translation phase when only basis gates are used may improve overall performance,
   especially when many circuits are used repeatedly such as is teh case with the VQE algorithm.

   .. note::
   Use with caution as if the quantum algorithm does not restrict itself to the set of basis gates supported by the
   backend, then the circuit will fail to run.

-  An optional dictionary can be supplied to control the backend's noise model (see
   the documentation on `noise parameters <https://github.com/QISKit/qiskit-sdk-py/tree/master/src/qasm-simulator-cpp#noise-parameters>`__
   for more details):

   .. code:: python

       noise_params : dictionary

   This is a Python dictionary consisting of key/value pairs.  Configuring it is optional; the default
   value is ``None``.

   The following is an example of such a dictionary that can be used:

   .. code:: python

      "noise_params": {"U": {"p_depol": 0.001,
                             "p_pauli": [0, 0, 0.01],
                             "gate_time": 1,
                             "U_error": [ [[1, 0], [0, 0]]
                                        ]
                            }
                      }
