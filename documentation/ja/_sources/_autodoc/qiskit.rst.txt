qiskit package
==============


.. automodule:: qiskit
    :members: ROOT_DIR, version_file
    :undoc-members:
    :show-inheritance:
    
    Submodules
    ----------

    .. toctree::
       :maxdepth: 1
   


       
       
       
       
       
       
       
       
       
       
       
       
       
       

    Subpackages
    -----------

    .. toctree::
       :maxdepth: 1

       qiskit.backends
       qiskit.dagcircuit
       qiskit.extensions
       qiskit.mapper
       qiskit.qasm
       qiskit.qobj
       qiskit.result
       qiskit.transpiler
       qiskit.unroll
       qiskit.wrapper

    Exceptions
    ----------


    .. list-table::
    
       * - :exc:`QISKitError <qiskit._qiskiterror.QISKitError>`
         - Base class for errors raised by the QISKit SDK.
       * - :exc:`SchemaValidationError <qiskit._schema_validation.SchemaValidationError>`
         - Represents an error during JSON Schema validation.
    

    Classes
    -------


    .. list-table::
    
       * - :class:`ClassicalRegister <qiskit._classicalregister.ClassicalRegister>`
         - Implement a classical register.
       * - :class:`CompositeGate <qiskit._compositegate.CompositeGate>`
         - Composite gate, a sequence of unitary gates.
       * - :class:`Gate <qiskit._gate.Gate>`
         - Unitary gate.
       * - :class:`Instruction <qiskit._instruction.Instruction>`
         - Generic quantum computer instruction.
       * - :class:`InstructionSet <qiskit._instructionset.InstructionSet>`
         - Instruction collection.
       * - :class:`Measure <qiskit._measure.Measure>`
         - Quantum measurement in the computational basis.
       * - :class:`QuantumCircuit <qiskit._quantumcircuit.QuantumCircuit>`
         - Quantum circuit.
       * - :class:`QuantumRegister <qiskit._quantumregister.QuantumRegister>`
         - Implement a quantum register.
       * - :class:`Reset <qiskit._reset.Reset>`
         - Qubit reset.
       * - :class:`Result <qiskit.result._result.Result>`
         - Results for a collection of experiments sent in a ``Qobj`` instance.
    



    .. _qiskit_top_level_functions:


    Functions
    ---------


    .. list-table::
    
       * - :func:`available_backends <qiskit.wrapper._wrapper.available_backends>`
         - Return names of backends that are available in the SDK, optionally filtering them based on their capabilities.
       * - :func:`compile <qiskit.wrapper._wrapper.compile>`
         - Compile a list of circuits into a qobj.
       * - :func:`execute <qiskit.wrapper._wrapper.execute>`
         - Executes a set of circuits.
       * - :func:`get_backend <qiskit.wrapper._wrapper.get_backend>`
         - Return an instance of a `Backend` object from its name identifier.
       * - :func:`least_busy <qiskit.wrapper._wrapper.least_busy>`
         - Return the least busy available backend for those that have a `pending_jobs` in their `status`.
       * - :func:`load_qasm_file <qiskit.wrapper._wrapper.load_qasm_file>`
         - Construct a quantum circuit from a qasm representation (file).
       * - :func:`load_qasm_string <qiskit.wrapper._wrapper.load_qasm_string>`
         - Construct a quantum circuit from a qasm representation (string).
       * - :func:`qobj_to_circuits <qiskit.wrapper._wrapper.qobj_to_circuits>`
         - Return a list of QuantumCircuit object(s) from a qobj
       * - :func:`register <qiskit.wrapper._wrapper.register>`
         - Authenticate against an online backend provider.
       * - :func:`registered_providers <qiskit.wrapper._wrapper.registered_providers>`
         - Return the currently registered providers.
       * - :func:`unregister <qiskit.wrapper._wrapper.unregister>`
         - Removes a provider from list of registered providers.
       * - :func:`validate_json_against_schema <qiskit._schema_validation.validate_json_against_schema>`
         - Validates JSON dict against a schema.
    